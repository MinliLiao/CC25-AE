# CC25-AE
This is the artifact for the artifact evaluation of CC 2025. This artifact include the nZDC-Compiler implementation (based on LLVM) with our fix added as described in the paper and the scripts to download the benchmarks (where possible), compile them with vanilla LLVM and nZDC-Compiler with our fixes, and run them.

## Hardware requirements
An AArch64 machine supporting ARMv8 (we used Neoverse-N1) with sudo access (to install dependencies and mount images), >2GB memory for SPEC06 benchmarks, >12GB storage for PARSEC benchmarks.

## Software requirements
Linux system (we used Ubuntu 24.04.1 LTS) for compiling the LLVM, nZDC-Compiler with our fixes and PARSEC benchmarks. An image of the SPEC06 benchmarks is also required to run the SPEC06 benchmarks (not included in the artifact). 

## Build and Install
Download the artifact and cd to the root directory of this artifact, install the dependencies with
```
bash dependencies.sh
```

To get the vanilla LLVM and build build both the vanilla LLVM and nZDC-Compiler with our fixes:
```
bash build.sh
```

To get the PARSEC benchmarks and set up the directories to build and run them:
```
bash setup_parsec.sh
```

To work with SPEC06 benchmarks, put your image of the SPEC06 benchmarks in the root directory of this artifact, and then run
```
bash setup_spec06.sh
```

## Compiling and running
From the root directory of this artifact, to compile the PARSEC benchmarks with vanilla LLVM and nZDC-Compiler with our fixes and then run the two binaries to get timing
```
cd benchmarks
make run_parsec
```

To compile the SPEC benchmarks with vanilla LLVM and nZDC-Compiler with our fixes and then run the two binaries to get timing
```
make run_spec
```
Note that 445.gobmk would compile and run successfully but exit make with error due to output difference.
The 403.gcc, 471.omnetpp, 483.xalancbmk benchmarks would fail, but can be ran individually with
```
make run_403.gcc
make run_471.omnetpp
make run_483.xalancbmk
```

## Collecting results
From the root directory of this artifact, to collect and print out the timing results
```
bash collect_results.sh
```
The produced result consist of the benchmark name, the execution time of the benchmark compiled with vanilla LLVM, the execution time of the benchmark compiled with nZDC-Compiler with our fix, and the slowdown of execution time with nZDC compared to vanilla.

## Expectations
All benchmarks except 403.gcc, 471.omnetpp and 483.xalancbmk should be able to compile and run to completion.
Collected results should show slowdown with trend similar to figure 8 in the paper, though the numbers would match exactly.